data {
  int <lower=1> M; // number of countries
  int <lower=1> N0; // number of days for which to impute infections
  int<lower=1> N[M]; // days of observed data for country m. each entry must be <= N2
  int<lower=1> N2; // days of observed data + number of days to forecast
  real<lower=0> x[N2]; // index of days (starting at 1)
 int cases[N2,M]; // reported cases
  int deaths[N2, M]; // reported deaths -- the rows with i > N contain -1 and should be ignored
  matrix[N2, M] f; // h * s
  matrix[N2, M] covariate1;
  matrix[N2, M] covariate2;
  matrix[N2, M] covariate3;
  matrix[N2, M] covariate4;
  matrix[N2, M] covariate5;
  matrix[N2, M] covariate6;
  matrix[N2, M] covariate7;
  matrix[N2, M] covariate8;
  matrix[N2, M] covariate9;
  matrix[N2, M] covariate10;
  matrix[N2, M] covariate11;
  matrix[N2, M] covariate12;
  matrix[N2, M] covariate13;
  matrix[N2, M] covariate14;
  matrix[N2, M] covariate15;
  matrix[N2, M] covariate16;
  matrix[N2, M] covariate17;
  matrix[N2, M] covariate18;
  matrix[N2, M] covariate19;
  matrix[N2, M] covariate20;
  matrix[N2, M] covariate21;
  matrix[N2, M] covariate22;
  matrix[N2, M] covariate23;
  matrix[N2, M] covariate24;
  matrix[N2, M] covariate25;
  matrix[N2, M] covariate26;
  matrix[N2, M] covariate27;
  matrix[N2, M] covariate28;
  matrix[N2, M] covariate29;
  matrix[N2, M] covariate30;
  matrix[N2, M] covariate31;
  matrix[N2, M] covariate32;
  matrix[N2, M] covariate33;
  matrix[N2, M] covariate34;
  matrix[N2, M] covariate35;
  matrix[N2, M] covariate36;
 
  real SI[N2]; // fixed pre-calculated SI using emprical data from Neil

}

transformed data {
  real delta = 1e-5;

}

parameters {
  real<lower=0> mu[M]; // intercept for Rt
  real<lower=0> alpha[36]; // the hier term
  real<lower=0> kappa;
  real<lower=0> y[M];
  real<lower=0> phi;
  real<lower=0> tau;

}

transformed parameters {
    real convolution;
    matrix[N2, M] prediction = rep_matrix(0,N2,M);
    matrix[N2, M] E_deaths  = rep_matrix(0,N2,M);
    matrix[N2, M] Rt = rep_matrix(0,N2,M);
    for (m in 1:M){
      prediction[1:N0,m] = rep_vector(y[m],N0); // learn the number of cases in the first N0 days
        Rt[,m] = mu[m] * exp(covariate1[,m] * (-alpha[1]) + covariate2[,m] * (-alpha[2]) +
        covariate3[,m] * (-alpha[3]) + covariate4[,m] * (-alpha[4]) + covariate5[,m] * (-alpha[5]) + 
        covariate6[,m]*(-alpha[6])+ covariate7[,m] * (-alpha[7])+ covariate8[,m] * (-alpha[8])
        + covariate9[,m] * (-alpha[9])+ covariate10[,m] * (-alpha[10])+ covariate11[,m] * (-alpha[11]) +
        covariate12[,m] * (-alpha[12])+ covariate13[,m] * (-alpha[13]) + 
        covariate14[,m] * (-alpha[14]) +
      covariate15[,m] * (-alpha[15])+ covariate16[,m] * (-alpha[16])
      +  covariate17[,m] * (-alpha[17]) +
        covariate18[,m] * (-alpha[18]) + covariate19[,m] * (-alpha[19]) + covariate20[,m] * (-alpha[20]) + 
        covariate21[,m]*(-alpha[21])+ covariate22[,m] * (-alpha[22])+ covariate23[,m] * (-alpha[23])
        + covariate24[,m] * (-alpha[24])+ covariate25[,m] * (-alpha[25])+ covariate26[,m] * (-alpha[26]) +
        covariate27[,m] * (-alpha[27])+ covariate28[,m] * (-alpha[28]) + 
        covariate29[,m] * (-alpha[29]) +
      covariate30[,m] * (-alpha[30])+ covariate31[,m] * (-alpha[31]) + covariate32[,m] * (-alpha[32]) 
      +covariate33[,m] * (-alpha[33]) + covariate34[,m] * (-alpha[34]) + 
      covariate35[,m] * (-alpha[35]) + covariate36[,m] * (-alpha[36]) ); // + GP[i]); // to_vector(x) * time_effect
      for (i in (N0+1):N2) {
        convolution=0;
        for(j in 1:(i-1)) {
          convolution += prediction[j, m]*SI[i-j]; // Correctd 22nd March
        
        }
        
        prediction[i, m] = Rt[i,m] * convolution;
      
      }
      
      
      E_deaths[1, m]= 1e-9;
      for (i in 2:N2){
        E_deaths[i,m]= 0;
        for(j in 1:(i-1)){
          E_deaths[i,m] += prediction[j,m]*f[i-j,m];
        
        }
      }
    }
   /* for(m in 1:M) {
     for(i in 1:N[m]) {
      LowerBound[i,m] = prediction[i,m] * 10 - cases[i,m];
     }
    }*/

}
model {
  tau ~ exponential(0.03);
  for (m in 1:M){
      y[m] ~ exponential(1.0/tau);
  }
  phi ~ normal(0,5);
  kappa ~ normal(0,0.5);
  mu ~ normal(0.1, kappa); // citation needed 
  alpha ~ gamma(0.5,1);
  for(m in 1:M){
    for(i in 1:N[m]){
       deaths[i,m] ~ neg_binomial_2(E_deaths[i,m],phi); 
    
    }
   }
}

generated quantities {
    matrix[N2, M] lp0 = rep_matrix(1000,N2,M); // log-probability for LOO for the counterfactual model
    matrix[N2, M] lp1 = rep_matrix(1000,N2,M); // log-probability for LOO for the main model
    real convolution0;
    matrix[N2, M] prediction0 = rep_matrix(0,N2,M);
    matrix[N2, M] E_deaths0  = rep_matrix(0,N2,M);
    for (m in 1:M){
      prediction0[1:N0,m] = rep_vector(y[m],N0); // learn the number of cases in the first N0 days
      for (i in (N0+1):N2) {
        convolution0=0;
        for(j in 1:(i-1)) {
          convolution0 += prediction0[j, m]*SI[i-j]; // Correctd 22nd March
        
        }
        prediction0[i, m] = mu[m] * convolution0;
      
      }
      
      E_deaths0[1, m]= 1e-9;
      for (i in 2:N2){
        E_deaths0[i,m]= 0;
        for(j in 1:(i-1)){
          E_deaths0[i,m] += prediction0[j,m]*f[i-j,m];
        
        }
      }
      for(i in 1:N[m]){
        lp0[i,m] = neg_binomial_2_lpmf(deaths[i,m] | E_deaths[i,m],phi); 
        lp1[i,m] = neg_binomial_2_lpmf(deaths[i,m] | E_deaths0[i,m],phi); 
      
      }
    }

}
