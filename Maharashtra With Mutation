options(rstan.useNULL = TRUE) 
library(StanHeaders)
library(rstan)
library(data.table)
library(lubridate)
library(gdata)
library(EnvStats)

#install.packages("macos-rtools-4.0.0.pkg", repos = NULL, type = "source")

library(ggplot2)
library(readr)


countries="Maharashtra"
args = commandArgs(trailingOnly=TRUE)
if(length(args) == 0) {
  args = 'base_stan_mh_wm'
} 
StanModel = args[1]

print(sprintf("Running %s",StanModel))
setwd("~/Downloads") 
## Reading all data
d=read_csv("Maharashtra mutations final .csv")
dim(d)
head(d)

d = data.frame(d)
d = na.omit(d)
tail(d$Collection.Dates)

d$Collection.Dates
summary(d$Daily.Cases)
summary(d$Daily.Deaths)

sum(is.finite(d$Daily.Deaths))
sum(is.finite(d$Daily.Cases))

sum(is.infinite(covariates$Interstate.Transport))

d$Daily.Cases= abs(d$Daily.Cases)
d$Daily.Deaths=abs(d$Daily.Deaths)


covariates=d[,c(4,5,6,37,39,53,57,97,143,144,146,166,196,221,258,318,321,323,366,384,390,446,447,449,451,802,803,822,
                875,923,933,949,959,983,991,998)]
head(covariates)
#covariates = data.frame(covariates[,c(1:3)])
dim(d)

summary(covariates)

dim(covariates)
head(covariates)
sum(is.na(covariates$Markets..Shopping.complexes.and.malls))
setwd("~/Downloads") 
serial.interval = read.csv("serial_interval.csv")
head(serial.interval)
dim(serial.interval)
dim(d)
serial.interval = serial.interval[1:451,]
#serial.interval = serial.interval[,c(1, 2)]
#serial.interval = serial.interval[,c(1)]
dim(d)
#serial.interval = serial.interval[1:175,]
head(serial.interval)
dim(serial.interval)
#serial.interval =data.frame(c(serial.interval$X , c(1:16)) ,c(serial.interval$fit , rep(4.440000e-16, 16)))


sum(is.na(serial.interval$fit))

dim(serial.interval)
head(serial.interval)

p <- ncol(covariates)
forecast = 0
dim(d)
DEBUG = FALSE
if(DEBUG == FALSE) {
  N2 = 451 # Increase this for a further forecast
}  else  {
  ### For faster runs:
  N2 = 451
}
dates = list()
dates=d$Collection.Dates
reported_cases = list()
stan_data = list(M=1,N= NULL,
                 p=p,x1=poly(1:N2,2)[,1],
                 x2=poly(1:N2,2)[,2],
                 y=NULL,
                 covariate1=NULL,
                 covariate2=NULL,
                 covariate3=NULL,
                 covariate4=NULL,
                 covariate5=NULL,
                 covariate6=NULL,
                 covariate7=NULL,
                 covariate8=NULL,
                 covariate9=NULL,
                 covariate10=NULL,
                 covariate11=NULL,
                 covariate12=NULL,
                 covariate13=NULL,
                 covariate14=NULL,
                 covariate15=NULL,
                 covariate16=NULL,
                 covariate17=NULL,
                 covariate18=NULL,
                 covariate19=NULL,
                 covariate20=NULL,
                 covariate21=NULL,
                 covariate22=NULL,
                 covariate23=NULL,
                 covariate24=NULL,
                 covariate25=NULL,
                 covariate26=NULL,
                 covariate27=NULL,
                 covariate28=NULL,
                 covariate29=NULL,
                 covariate30=NULL,
                 covariate31=NULL,
                 covariate32=NULL,
                 covariate33=NULL,
                 covariate34=NULL,
                 covariate35=NULL,
                 covariate36=NULL,
                 deaths=NULL,
                 f=NULL,
                 N0=6,
                 cases=NULL,
                 LENGTHSCALE=7
                 ,SI=serial.interval$fit[1:N2]) # N0 = 6 to make it consistent with Rayleigh
deaths_by_country = list()

Country=countries
Country

stan_data
sum(is.infinite(stan_data$SI))
#CFR=cfr.by.country$weighted_fatality[cfr.by.country$country == Country]
CFR=0.009185


# hazard estimation
N = length(d$Daily.Cases) #d
N
#print(sprintf("%s has %d days of data",Country,N))
forecast = 15
N2 = N+15
N2
h = rep(0,forecast+N) # discrete hazard rate from time t = 1, ..., 100
h
length(h)
if(DEBUG) { # OLD -- but faster for testing this part of the code
  mean = 18.8
  cv = 0.45
  
  for(i in 1:length(h))
    h[i] = (CFR*pgammaAlt(i,mean = mean,cv=cv) - CFR*pgammaAlt(i-1,mean = mean,cv=cv)) / (1-CFR*pgammaAlt(i-1,mean = mean,cv=cv))
} else { # NEW
  mean1 = 5.1; cv1 = 0.86; # infection to onset
  mean2 = 18.8; cv2 = 0.45 # onset to death
  ## assume that CFR is probability of dying given infection
  x1 = rgammaAlt(5e6,mean1,cv1) # infection-to-onset ----> do all people who are infected get to onset?
  x2 = rgammaAlt(5e6,mean2,cv2) # onset-to-death
  f = ecdf(x1+x2)
  convolution = function(u) (CFR * f(u))
  
  h[1] = (convolution(1.5) - convolution(0)) 
  for(i in 2:length(h)) {
    h[i] = (convolution(i+.5) - convolution(i-.5)) / (1-convolution(i-.5))
  }
}
s = rep(0,N2)
s[1] = 1 
for(i in 2:N2) {
  s[i] = s[i-1]*(1-h[i-1])
}
f = s * h
f
y=c(as.vector(as.numeric(d$Daily.Cases)),rep(-1,forecast))
#reported_cases[[Country]] = as.vector(as.numeric(d1$cases))
deaths=c(as.vector(as.numeric(d$Daily.Deaths)),rep(-1,forecast))

cases=c(as.vector(as.numeric(d$Daily.Cases)),rep(-1,forecast))
#deaths_by_country[[Country]] = as.vector(as.numeric(d1$deaths))
covariates2 <- as.data.frame(covariates[, colnames(covariates)])
# x=1:(N+forecast)
covariates2[N:(N+forecast),] <- covariates2[N,]


## append data
stan_data$N = c(stan_data$N,N)

stan_data$y = c(stan_data$y,y[1]) # just the index case!
# stan_data$x = cbind(stan_data$x,x)
stan_data$covariate1 = cbind(stan_data$covariate1,covariates2[,1])
stan_data$covariate2 = cbind(stan_data$covariate2,covariates2[,2])
stan_data$covariate3 = cbind(stan_data$covariate3,covariates2[,3])
stan_data$covariate4 = cbind(stan_data$covariate4,covariates2[,4])
stan_data$covariate5 = cbind(stan_data$covariate5,covariates2[,5])
stan_data$covariate6 = cbind(stan_data$covariate6,covariates2[,6])
stan_data$covariate7 = cbind(stan_data$covariate7,covariates2[,7])
stan_data$covariate8 = cbind(stan_data$covariate8,covariates2[,8])
stan_data$covariate9 = cbind(stan_data$covariate9,covariates2[,9])
stan_data$covariate10 = cbind(stan_data$covariate10,covariates2[,10])
stan_data$covariate11 = cbind(stan_data$covariate11,covariates2[,11])
stan_data$covariate12 = cbind(stan_data$covariate12,covariates2[,12])
stan_data$covariate13 = cbind(stan_data$covariate13,covariates2[,13])
stan_data$covariate14 = cbind(stan_data$covariate14,covariates2[,14])
stan_data$covariate15 = cbind(stan_data$covariate15,covariates2[,15])
stan_data$covariate16 = cbind(stan_data$covariate16,covariates2[,16])
stan_data$covariate17 = cbind(stan_data$covariate17,covariates2[,17])
stan_data$covariate18 = cbind(stan_data$covariate18,covariates2[,18])
stan_data$covariate19 = cbind(stan_data$covariate19,covariates2[,19])
stan_data$covariate20 = cbind(stan_data$covariate20,covariates2[,20])
stan_data$covariate21 = cbind(stan_data$covariate21,covariates2[,21])
stan_data$covariate22 = cbind(stan_data$covariate22,covariates2[,22])
stan_data$covariate23 = cbind(stan_data$covariate23,covariates2[,23])
stan_data$covariate24 = cbind(stan_data$covariate24,covariates2[,24])
stan_data$covariate25 = cbind(stan_data$covariate25,covariates2[,25])
stan_data$covariate26 = cbind(stan_data$covariate26,covariates2[,26])
stan_data$covariate27 = cbind(stan_data$covariate27,covariates2[,27])
stan_data$covariate28 = cbind(stan_data$covariate28,covariates2[,28])
stan_data$covariate29 = cbind(stan_data$covariate29,covariates2[,29])
stan_data$covariate30 = cbind(stan_data$covariate30,covariates2[,30])
stan_data$covariate31 = cbind(stan_data$covariate31,covariates2[,31])
stan_data$covariate32 = cbind(stan_data$covariate32,covariates2[,32])
stan_data$covariate33 = cbind(stan_data$covariate33,covariates2[,33])
stan_data$covariate34 = cbind(stan_data$covariate34,covariates2[,34])
stan_data$covariate35 = cbind(stan_data$covariate35,covariates2[,35])
stan_data$covariate36 = cbind(stan_data$covariate36,covariates2[,36])


stan_data$f = cbind(stan_data$f,f)
stan_data$deaths = cbind(stan_data$deaths,deaths)
stan_data$cases = cbind(stan_data$cases,cases)

stan_data$deaths

stan_data$N2=N2
stan_data$x=1:N2
if(length(stan_data$N) == 1) {
  stan_data$N = as.array(stan_data$N)
}



if(DEBUG) {
write.csv(
data.frame(date=dates[[1]],
             `Interstate.Transport`=stan_data$covariate1[1:stan_data$N,1],
             `Intrastate.Transport`=stan_data$covariate2[1:stan_data$N,1],
             `Markets..malls.and.shopping.complexes`=stan_data$covariate3[1:stan_data$N,1]),#,
             #`Presence210`=stan_data$covariate4[1:stan_data$N,1],
             #`Presence23403`=stan_data$covariate5[1:stan_data$N,1]) # ,
 file=sprintf("results/%s-check-dates.csv",countries),row.names=F)
}



stan_data$y = t(stan_data$y)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
#rstan_options(auto_write = T)
m = stan_model(paste0('base_gujrat-2.stan'))

#m = stan_model("D:/Meghna/First work/stan_models/base_gujrat.stan")

if(DEBUG) { 
  fit = sampling(m,data=stan_data,iter=40,warmup=20,chains=3)
} else { 
  # fit = sampling(m,data=stan_data,iter=4000,warmup=2000,chains=8,thin=4,control = list(adapt_delta = 0.90, max_treedepth = 10))
  fit = sampling(m,data=stan_data,iter=10000,warmup= 5000,chains=3,thin=4,control = list(adapt_delta = 0.99, max_treedepth = 15))
}  

out2 = rstan::extract(fit) 
MH_out_w_mut = out2
